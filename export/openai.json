[
          {
                    "text": "let\n    Source = Sql.Databases(\"muc-mssql-2\"),\n    datahub = Source{[Name=\"datahub\"]}[Data],\n    msr_v_hr_employee_job_matrix = datahub{[Schema=\"msr\",Item=\"v_hr_employee_job_matrix\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(msr_v_hr_employee_job_matrix, each Date.IsInCurrentYear([key_date]))\nin\n    #\"Filtered Rows\"",
                    "content": "This M code connects to a SQL Server database named \"muc-mssql-2\" and retrieves data from a table named \"v_hr_employee_job_matrix\" in the schema \"msr\". It then filters the data to only include rows where the \"key_date\" column is in the current year. The resulting table is returned as output."
          },
          {
                    "text": "let\n    Source = Sql.Databases(\"muc-mssql-2\"),\n    datahub = Source{[Name=\"datahub\"]}[Data],\n    rep_v_hr_employee = datahub{[Schema=\"rep\",Item=\"v_hr_employee\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(rep_v_hr_employee, each [ter_max_date] > #date(2022, 12, 31))\nin\n    #\"Filtered Rows\"",
                    "content": "This M code connects to a SQL Server database named \"muc-mssql-2\" and accesses a specific database named \"datahub\". It then selects a specific table within that database named \"v_hr_employee\" that belongs to a specific schema named \"rep\". \n\nThe next step filters the rows in the \"v_hr_employee\" table where the value in the \"ter_max_date\" column is greater than #date(2022, 12, 31). This means that only the rows that have a \"ter_max_date\" greater than December 31, 2022 will be kept in the resulting table. \n\nThe final output is the filtered table containing only the desired rows."
          },
          {
                    "text": "let\n    Source = Sql.Databases(\"muc-mssql-2\"),\n    datahub = Source{[Name=\"datahub\"]}[Data],\n    pub_dim_date = datahub{[Schema=\"pub\",Item=\"dim_date\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(pub_dim_date, each Date.IsInCurrentYear([Date]) or Date.IsInPreviousYear([Date])),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"DateKey\", \"Date\", \"Day\", \"Weekday\", \"WeekDayName\", \"WeekOfYear\", \"Month\", \"MonthName\", \"Year\", \"YearMonthnumber\", \"FirstDayOfMonth\", \"YearMonthShort\", \"ISOWeekOfYearNameInCal\"}),\n    #\"Inserted First Characters\" = Table.AddColumn(#\"Removed Other Columns\", \"MonthNameShort\", each Text.Start([MonthName], 3), type text),\n    #\"Inserted Quarter\" = Table.AddColumn(#\"Inserted First Characters\", \"QuarterNr\", each Date.QuarterOfYear([Date]), type text),\n    #\"Inserted Merged Column\" = Table.AddColumn(#\"Inserted Quarter\", \"Quarter\", each Text.Combine({\"Q\", Text.From([QuarterNr], \"de-DE\")}), type text),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Inserted Merged Column\",{{\"QuarterNr\", Int64.Type}})\nin\n    #\"Changed Type\"",
                    "content": "This M code connects to a SQL database named \"muc-mssql-2\" and retrieves data from a table named \"dim_date\" in the \"pub\" schema of a database named \"datahub\". It then filters the rows of the table to only include dates from the current year or the previous year. \n\nThe code then selects specific columns from the filtered table and adds two new columns: \"MonthNameShort\" which contains the first three characters of the \"MonthName\" column, and \"Quarter\" which combines the \"QuarterNr\" column (which is calculated using the \"Date.QuarterOfYear\" function) with the letter \"Q\" to create a string representing the quarter of the year.\n\nFinally, the code changes the data type of the \"QuarterNr\" column to \"Int64\"."
          },
          {
                    "text": "let\n    Source = #\"msr v_fc_order_income_accumulated_source\",\n    #\"Filtered Rows\" = Table.SelectRows(Source, each ([industry] <> \"Not assigned\")),\n    #\"Inserted Month\" = Table.AddColumn(#\"Filtered Rows\", \"Month\", each Date.Month([report_month]), Int64.Type),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Inserted Month\",{\"Month\"}),\n    #\"Added Custom\" = Table.AddColumn(#\"Removed Columns\", \"report_month_previous\", each Date.AddMonths([report_month], -1), type date),\n    #\"Inserted Text After Delimiter\" = Table.AddColumn(#\"Added Custom\", \"report_month_previous_id\", each Text.AfterDelimiter(Text.From([report_month_previous], \"de-DE\"), \".\"), type text),\n    #\"Merged Queries\" = Table.NestedJoin(#\"Inserted Text After Delimiter\", {\"project_number\", \"industry\", \"function\", \"company_name\", \"report_month_previous_id\"}, #\"msr v_fc_order_income_accumulated_source\", {\"project_number\", \"industry\", \"function\", \"company_name\", \"report_month_id\"}, \"msr v_fc_order_income_accumulated_source\", JoinKind.LeftOuter),\n    #\"Expanded msr v_fc_order_income_accumulated_source\" = Table.ExpandTableColumn(#\"Merged Queries\", \"msr v_fc_order_income_accumulated_source\", {\"order_income\"}, {\"order_income_previous\"}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Expanded msr v_fc_order_income_accumulated_source\",null,0,Replacer.ReplaceValue,{\"order_income_previous\"}),\n    #\"Added Custom1\" = Table.AddColumn(#\"Replaced Value\", \"order_income_current\", each [order_income] - [order_income_previous], type number),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Custom1\",{{\"order_income\", \"order_income_total\"}}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Renamed Columns\",\"Not assigned\",\"Not Assigned\",Replacer.ReplaceText,{\"industry\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"Not assigned\",\"Not Assigned\",Replacer.ReplaceText,{\"function\"}),\n    #\"Merged Queries1\" = Table.NestedJoin(#\"Replaced Value2\", {\"industry\"}, platform_sort, {\"platform_1_name\"}, \"platform_sort\", JoinKind.LeftOuter),\n    #\"Expanded platform_sort2\" = Table.ExpandTableColumn(#\"Merged Queries1\", \"platform_sort\", {\"platform_1_sort\", \"platform_1_name_short\"}, {\"platform_1_sort\", \"platform_1_name_short\"}),\n    #\"Renamed Columns2\" = Table.RenameColumns(#\"Expanded platform_sort2\",{{\"platform_1_sort\", \"industry_sort\"}, {\"platform_1_name_short\", \"industry_name_short\"}}),\n    #\"Merged Queries2\" = Table.NestedJoin(#\"Renamed Columns2\", {\"function\"}, platform_sort, {\"platform_1_name\"}, \"platform_sort\", JoinKind.LeftOuter),\n    #\"Expanded platform_sort\" = Table.ExpandTableColumn(#\"Merged Queries2\", \"platform_sort\", {\"platform_1_sort\", \"platform_1_name_short\"}, {\"platform_1_sort\", \"platform_1_name_short\"}),\n    #\"Renamed Columns3\" = Table.RenameColumns(#\"Expanded platform_sort\",{{\"platform_1_sort\", \"function_sort\"}, {\"platform_1_name_short\", \"function_name_short\"}}),\n    #\"Merged Queries3\" = Table.NestedJoin(#\"Renamed Columns3\", {\"project_number\", \"report_month_id\"}, #\"sec acp_orderIncome_byMonth\", {\"project_number\", \"report_month_id\"}, \"sec acp_orderIncome_byMonth\", JoinKind.LeftOuter),\n    #\"Expanded sec acp_orderIncome_byMonth\" = Table.ExpandTableColumn(#\"Merged Queries3\", \"sec acp_orderIncome_byMonth\", {\"orderIncome\"}, {\"orderIncome\"}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Expanded sec acp_orderIncome_byMonth\",{{\"orderIncome\", \"order_income_GROSS\"}}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Renamed Columns1\",\"Hongkong\",\"Hong Kong\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"Middle East Bahr.\",\"Bahrain\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"PX America\",\"PXNorth America\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"PX Engineers\",\"PXEngineering\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value7\" = Table.ReplaceValue(#\"Replaced Value6\",\"PX Partner\",\"PXPartner\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value8\" = Table.ReplaceValue(#\"Replaced Value7\",\"Rep. of Korea\",\"South Korea\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value9\" = Table.ReplaceValue(#\"Replaced Value8\",\"Singapur\",\"Singapore\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value10\" = Table.ReplaceValue(#\"Replaced Value9\",\"TMG\",\"Turnaround Management GmbH\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value11\" = Table.ReplaceValue(#\"Replaced Value10\",\"UK\",\"United Kingdom\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Merged Queries4\" = Table.NestedJoin(#\"Replaced Value11\", {\"industry_subject\"}, subplatforms_industry, {\"industry_subject\"}, \"subplatforms_industry\", JoinKind.LeftOuter),\n    #\"Expanded subplatforms_industry\" = Table.ExpandTableColumn(#\"Merged Queries4\", \"subplatforms_industry\", {\"industry_subplatform\"}, {\"industry_subplatform\"}),\n    #\"Replaced Value12\" = Table.ReplaceValue(#\"Expanded subplatforms_industry\",\"Turnaround Management GmbH\",\"TMG\",Replacer.ReplaceText,{\"company_name\"}),\n    #\"Replaced Value13\" = Table.ReplaceValue(#\"Replaced Value12\",\"test12345\",\"test54321\",Replacer.ReplaceText,{\"project_number\"})\nin\n    #\"Replaced Value13\"",
                    "content": "This M code is a series of transformations applied to a source table called \"msr v_fc_order_income_accumulated_source\". The transformations include filtering rows where the \"industry\" column is not \"Not assigned\", adding a \"Month\" column based on the \"report_month\" column, merging two tables based on several columns, expanding a table column, replacing null values with 0, adding a custom column that calculates the difference between two columns, renaming columns, replacing text values in certain columns, merging and expanding additional tables based on columns, and finally replacing more text values in a column. The resulting table is the output of all these transformations."
          },
          {
                    "text": "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMjQAAaXYWAA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Net_order_income = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Net_order_income\", Int64.Type}})\nin\n    #\"Changed Type\"",
                    "content": "This M Code creates a table named \"Source\" by converting a compressed binary text string into a JSON document and then transforming the rows into a table with one column named \"Net_order_income\". The second part of the code transforms the \"Net_order_income\" column to an integer data type. The resulting table is returned with the name \"Changed Type\"."
          },
          {
                    "text": "let\n    StandardOffset = #duration(0, 1, 0, 0),\n    DaylightSavingTimeOffset = #duration(0, 2, 0, 0),\n\n    // get start and end of daylight saving time\n    // this code implements the rules of EU counties\n    // if it doesn't fill your expectations, visit https://en.wikipedia.org/wiki/Daylight_saving_time_by_country and implement your own function\n    fnDaylightSavingTimePeriod = (\n        now as datetime\n    ) as record => \n        let\n            // the daylight saving time starts on the last Sunday of March at 1am UTC\n            LastDayOfMarch = #date(Date.Year(now), 3, 31),\n            StartOfDaylightSavingTime = Date.AddDays(LastDayOfMarch, -Date.DayOfWeek(LastDayOfMarch)) & #time(1, 0, 0),\n            // the daylight saving time ends on the last Sunday in October at 1am UTC\n            LastDayOfOctober = #date(Date.Year(now), 10, 31),\n            EndOfDaylightSavingTime = Date.AddDays(LastDayOfOctober, -Date.DayOfWeek(LastDayOfOctober)) & #time(1, 0, 0)\n        in\n            [From = StartOfDaylightSavingTime, To = EndOfDaylightSavingTime],\n\n    // get a timestamp in UTC (with offset 00:00 all year long)\n    UtcNow = DateTimeZone.UtcNow(),\n    // convert UTC datetime with offset to datetime\n    UtcNowWithoutZone = DateTimeZone.RemoveZone(UtcNow),\n\n    // get daylight saving time period\n    DaylightSavingTimePeriod = fnDaylightSavingTimePeriod(UtcNowWithoutZone),\n\n    // convert UTC time to the local time with respect to current offset\n    LocalTimeWithOffset = \n        if UtcNowWithoutZone >= DaylightSavingTimePeriod[From] and UtcNowWithoutZone <= DaylightSavingTimePeriod[To] then\n            DateTimeZone.SwitchZone(\n                UtcNow, \n                Duration.Hours(DaylightSavingTimeOffset), \n                Duration.Minutes(DaylightSavingTimeOffset)\n            )\n        else\n            DateTimeZone.SwitchZone(\n                UtcNow, \n                Duration.Hours(StandardOffset), \n                Duration.Minutes(StandardOffset)\n            ),\n    \n    // current date time without offset\n    LocalTime = DateTimeZone.RemoveZone(LocalTimeWithOffset),\n\n    // result table\n    Result = #table(\n        type table\n        [\n            #\"UTC timestamp\" = datetime, \n            #\"UTC date\" = date,\n            #\"Local timestamp with offset\" = datetimezone,\n            #\"Local timestamp without offset\" = datetime\n        ], \n        {\n            {\n            UtcNowWithoutZone,\n            DateTime.Date(UtcNowWithoutZone),\n            LocalTimeWithOffset,\n            LocalTime\n            }\n        }\n    ),\n    #\"Inserted Date\" = Table.AddColumn(Result, \"Last_refresh_local\", each DateTime.Date([Local timestamp without offset]), type date),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Inserted Date\",{\"UTC date\", \"Local timestamp without offset\"})\nin\n    #\"Removed Columns\"",
                    "content": "This M Code is used in Power Query Editor of Microsoft Power BI to get the current date and time with the local time zone offset. It first defines the standard offset and daylight saving time offset. Then, it defines a function to get the start and end of daylight saving time based on the rules of EU countries. It then gets the current UTC time and removes the time zone offset. Using the function, it determines if the current time is in daylight saving time or not and converts it to the local time with the respective offset. Finally, it creates a table with the UTC timestamp, UTC date, local timestamp with offset, and local timestamp without offset. It also adds a column to the table to get the date of the local timestamp without the offset and removes the UTC date and local timestamp without the offset columns."
          },
          {
                    "text": "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wcs4vzSspqlQoy0wtV9JRMlSK1YlWCshJLEnLL8qFiRpBRIvys1KTS2CCxmBBx6RiBX9PINcEzPX3VChILVIIAAqYggXOTXEKdVEFcs2g3IBIEM9cKTYWAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Peergroup_Comparison_Slicer = _t, Sort = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Peergroup_Comparison_Slicer\", type text}})\nin\n    #\"Changed Type\"",
                    "content": "This M code defines a Power Query query named \"Changed Type\" that transforms a table named \"Source\". The \"Source\" table is created from a compressed JSON document. \n\nThe \"Changed Type\" query transforms the \"Peergroup_Comparison_Slicer\" and \"Sort\" columns in the \"Source\" table to type text."
          },
          {
                    "text": "let\n    Source = Excel.Workbook(Web.Contents(\"https://rberger.sharepoint.com/sites/Reports-Report_OI/Shared%20Documents/Report_OI/Data/OI%20Budgets_monthly_vPowerBI.xlsx\")),\n    #\"OI Budget Countries_sheet\" = Source{[Item=\"OI Budget Countries\",Kind=\"Sheet\"]}[Data],\n    #\"Removed Top Rows\" = Table.Skip(#\"OI Budget Countries_sheet\", 6),\n    #\"Removed Bottom Rows\" = Table.RemoveLastN(#\"Removed Top Rows\", 29),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Removed Bottom Rows\", {\"Column2\", \"Column3\", \"Column4\", \"Column5\", \"Column6\", \"Column7\", \"Column8\", \"Column9\", \"Column10\", \"Column11\", \"Column12\", \"Column13\", \"Column14\", \"Column15\", \"Column16\", \"Column17\", \"Column18\", \"Column19\", \"Column20\", \"Column21\", \"Column22\", \"Column23\", \"Column24\", \"Column25\", \"Column26\", \"Column27\", \"Column28\", \"Column29\", \"Column30\", \"Column31\", \"Column32\", \"Column33\", \"Column34\", \"Column35\", \"Column36\", \"Column37\", \"Column38\", \"Column39\", \"Column40\", \"Column41\", \"Column42\", \"Column43\", \"Column44\", \"Column45\", \"Column46\", \"Column47\", \"Column48\", \"Column49\", \"Column50\", \"Column51\", \"Column52\", \"Column53\", \"Column54\", \"Column55\", \"Column56\", \"Column57\", \"Column58\", \"Column59\", \"Column60\", \"Column61\", \"Column62\"}),\n    FilterNullAndWhitespace = each List.Select(_, each _ <> null and (not (_ is text) or Text.Trim(_) <> \"\")),\n    #\"Removed Blank Rows\" = Table.SelectRows(#\"Removed Other Columns\", each not List.IsEmpty(FilterNullAndWhitespace(Record.FieldValues(_)))),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Blank Rows\", [PromoteAllScalars=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Country\", type text}, {\"BEL\", type number}, {\"ME\", type number}, {\"QAT\", type number}, {\"BHR/KSA/UAE\", type number}, {\"BHR\", type number}, {\"KSA\", type number}, {\"UAE\", Int64.Type}, {\"CIS\", Int64.Type}, {\"RUS\", Int64.Type}, {\"UKR\", Int64.Type}, {\"DACH\", type number}, {\"GER\", type number}, {\"AUT\", Int64.Type}, {\"CHE\", Int64.Type}, {\"OLD CHE\", Int64.Type}, {\"ESP\", type number}, {\"FRA\", Int64.Type}, {\"HUN\", Int64.Type}, {\"ITA\", Int64.Type}, {\"MOR\", Int64.Type}, {\"PRT\", type number}, {\"NLD\", type number}, {\"NOR\", Int64.Type}, {\"ROU\", type number}, {\"UK\", type number}, {\"CEE\", Int64.Type}, {\"CZE\", Int64.Type}, {\"CRO\", Int64.Type}, {\"POL\", Int64.Type}, {\"EMEA\", type number}, {\"BRA\", type number}, {\"CAN\", type number}, {\"USA\", type number}, {\"MEX\", type number}, {\"Americas\", type number}, {\"CHN\", type number}, {\"CHN_1\", type number}, {\"HKG\", type number}, {\"IND\", type number}, {\"JPN\", type number}, {\"KOR\", type number}, {\"SEA\", type number}, {\"IDN\", type number}, {\"MMR\", type number}, {\"MYS\", type number}, {\"SGP\", type number}, {\"THA\", type number}, {\"VNM\", type number}, {\"Asia\", type number}, {\"Polarix\", type number}, {\"PX Partner\", type number}, {\"PX Engineers\", type number}, {\"PX America\", type number}, {\"TMG\", type number}, {\"Other RB companies\", type number}, {\"Subtotal\", type number}, {\"HOL\", type number}, {\"Subtotal_2\", type number}, {\"Column60\", type number}, {\"Total\", type number}}),\n    #\"Renamed Columns1\" = Table.RenameColumns(#\"Changed Type\",{{\"Country\", \"Period\"}, {\"Column60\", \"Global Adjustment\"}}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Renamed Columns1\",{\"BHR/KSA/UAE\", \"OLD CHE\", \"EMEA\", \"Americas\", \"CHN_1\", \"HKG\", \"Asia\", \"Other RB companies\", \"Subtotal\", \"HOL\", \"Subtotal_2\", \"Total\", \"ME\", \"SEA\", \"DACH\"}),\n    #\"Removed Bottom Rows1\" = Table.RemoveLastN(#\"Removed Columns\",1),\n    #\"Added Year\" = Table.AddColumn(#\"Removed Bottom Rows1\", \"Year\", each Text.BeforeDelimiter([Period], \"_\"), type text),\n    #\"Added MonthName\" = Table.AddColumn(#\"Added Year\", \"MonthName\", each Text.BetweenDelimiters([Period], \"_\", \"_\", 1, 0), type text),\n    #\"Added Month\" = Table.AddColumn(#\"Added MonthName\", \"Month\", each if [MonthName] = \"Jan\" then 1 else if [MonthName] = \"Feb\" then 2 else if [MonthName] = \"Mar\" then 3 else if [MonthName] = \"Apr\" then 4 else if [MonthName] = \"May\" then 5 else if [MonthName] = \"Jun\" then 6 else if [MonthName] = \"Jul\" then 7 else if [MonthName] = \"Aug\" then 8 else if [MonthName] = \"Sep\" then 9 else if [MonthName] = \"Oct\" then 10 else if [MonthName] = \"Nov\" then 11 else if [MonthName] = \"Dec\" then 12 else null, type number),\n    #\"Inserted Merged Column\" = Table.AddColumn(#\"Added Month\", \"FirstDayOfMonth\", each Text.Combine({\"1/\", Text.From([Month], \"en-CH\"), \"/\", [Year]}), type text),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Merged Column\",{{\"FirstDayOfMonth\", type date}}),\n    #\"Removed Columns1\" = Table.RemoveColumns(#\"Changed Type1\",{\"Period\", \"Year\", \"MonthName\", \"Month\"}),\n    #\"Unpivoted Other Columns\" = Table.UnpivotOtherColumns(#\"Removed Columns1\", {\"FirstDayOfMonth\"}, \"Attribute\", \"Value\"),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Unpivoted Other Columns\",{{\"Attribute\", \"Country\"}, {\"Value\", \"OI_Budget\"}}),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Renamed Columns\",\"GER\",\"DEU\",Replacer.ReplaceText,{\"Country\"}),\n    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"UK\",\"GBR\",Replacer.ReplaceValue,{\"Country\"}),\n    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"UAE\",\"ARE\",Replacer.ReplaceText,{\"Country\"}),\n    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"MOR\",\"MAR\",Replacer.ReplaceText,{\"Country\"}),\n    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"KSA\",\"SAU\",Replacer.ReplaceText,{\"Country\"}),\n    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"NOR\",\"SWE\",Replacer.ReplaceText,{\"Country\"})\nin\n    #\"Replaced Value5\"",
                    "content": "This M Code is used to extract and clean data from an Excel file located in a SharePoint site. It performs the following steps:\n\n1. Accesses the Excel file using the Web.Contents function.\n2. Selects the \"OI Budget Countries\" sheet in the Excel file.\n3. Removes the first 6 rows and last 29 rows from the sheet.\n4. Selects specific columns of data.\n5. Removes any blank rows.\n6. Promotes the first row to headers.\n7. Changes the data types of columns.\n8. Renames certain columns.\n9. Removes unnecessary columns.\n10. Extracts the year and month from the \"Period\" column.\n11. Creates a new column with the first day of the month.\n12. Unpivots the data.\n13. Renames columns.\n14. Replaces certain values in the \"Country\" column.\n\nThe final output is a cleaned and transformed table of data."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    pub_v_ll_company_to_region = Source{[Schema=\"pub\",Item=\"v_ll_company_to_region\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(pub_v_ll_company_to_region, each ([company_id] <> \"77\")),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Filtered Rows\",\"polariXpartner\",\"PXPartner\",Replacer.ReplaceText,{\"region_reporting_level3\"}),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Replaced Value\", \"region_reporting_level1_sort\", each if [region_reporting_level1] = \"EMEA\" then 1 else if [region_reporting_level1] = \"Non-operational companies\" then 6 else if [region_reporting_level1] = \"Holding\" then 5 else if [region_reporting_level1] = \"Other RB companies\" then 4 else if [region_reporting_level1] = \"Americas\" then 2 else if [region_reporting_level1] = \"Asia\" then 3 else if [region_reporting_level1] = \"RUS\" then 7 else null, type number)\nin\n    #\"Added Conditional Column\"",
                    "content": "This M code connects to a SQL database called \"datahub\" on server \"muc-mssql-2\". It then selects a specific table \"v_ll_company_to_region\" from the database and filters out any rows where the \"company_id\" column is equal to \"77\". \n\nNext, it replaces the text \"polariXpartner\" in the \"region_reporting_level3\" column with \"PXPartner\". \n\nThen, a conditional column is added called \"region_reporting_level1_sort\" that assigns a number to each value in the \"region_reporting_level1\" column based on specific conditions. If the value is \"EMEA\", it is assigned a value of 1. If it is \"Non-operational companies\", it is assigned a value of 6, and so on. \n\nFinally, the resulting table with the added conditional column is returned as the output."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    msr_v_fc_project_data = Source{[Schema=\"msr\",Item=\"v_fc_project_data\"]}[Data],\n    #\"Added Custom Column\" = Table.AddColumn(msr_v_fc_project_data, \"delivery_manager_short\", each let splitdeliverymanager = Splitter.SplitTextByDelimiter(\" \", QuoteStyle.None)([delivery_manager]), splitdeliverymanager2 = Splitter.SplitTextByDelimiter(\", \", QuoteStyle.None)([delivery_manager]) in Text.Combine({splitdeliverymanager{0}?, \" \", Text.Start(splitdeliverymanager2{1}?, 1), \".\"}), type text),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Added Custom Column\",\".\",\"\",Replacer.ReplaceText,{\"delivery_manager_short\"})\nin\n    #\"Replaced Value\"",
                    "content": "This M Code connects to a SQL database named \"datahub\" on server \"muc-mssql-2\" and selects the table \"v_fc_project_data\" from the \"msr\" schema. It then adds a custom column named \"delivery_manager_short\" to the table by splitting the \"delivery_manager\" column into two parts and combining the first part with the first letter of the second part followed by a period. Finally, it replaces any periods in the \"delivery_manager_short\" column with an empty string."
          },
          {
                    "text": "let\n    Source = Excel.Workbook(Web.Contents(\"https://rberger.sharepoint.com/sites/Reports-Report_OI/Shared%20Documents/Report_OI/Data/OI%20Budgets_monthly_vPowerBI.xlsx\")),\n    #\"OI Budget Countries_sheet\" = Source{[Item=\"OI Budget Platforms\",Kind=\"Sheet\"]}[Data],\n    #\"Removed Top Rows\" = Table.Skip(#\"OI Budget Countries_sheet\",3),\n    #\"Removed Bottom Rows\" = Table.RemoveLastN(#\"Removed Top Rows\", 17),\n    #\"Removed Alternate Rows\" = Table.AlternateRows(#\"Removed Bottom Rows\",2,1,1),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Alternate Rows\", each ([Column2] <> \"Total\")),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"Column2\", \"Column5\", \"Column6\", \"Column7\", \"Column8\", \"Column9\", \"Column10\", \"Column11\", \"Column12\", \"Column13\", \"Column14\", \"Column15\", \"Column16\"}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Other Columns\", [PromoteAllScalars=true]),\n    #\"Unpivoted Other Columns\" = Table.UnpivotOtherColumns(#\"Promoted Headers\", {\"[EUR m]\"}, \"Attribute\", \"Value\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Unpivoted Other Columns\",{{\"Value\", type number}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"[EUR m]\", \"Platform\"}, {\"Attribute\", \"MonthName\"}, {\"Value\", \"OI_Budget\"}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each 2023, Int64.Type),\n    #\"Added Month\" = Table.AddColumn(#\"Added Custom\", \"Month\", each if [MonthName] = \"Jan\" then 1 else if [MonthName] = \"Feb\" then 2 else if [MonthName] = \"Mar\" then 3 else if [MonthName] = \"Apr\" then 4 else if [MonthName] = \"May\" then 5 else if [MonthName] = \"Jun\" then 6 else if [MonthName] = \"Jul\" then 7 else if [MonthName] = \"Aug\" then 8 else if [MonthName] = \"Sep\" then 9 else if [MonthName] = \"Oct\" then 10 else if [MonthName] = \"Nov\" then 11 else if [MonthName] = \"Dec\" then 12 else null, type number),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added Month\",{{\"Year\", type text}, {\"Month\", type text}}),\n    #\"Inserted Merged Column\" = Table.AddColumn(#\"Changed Type1\", \"FirstDayOfMonth\", each Text.Combine({\"1/\", Text.From([Month], \"en-CH\"), \"/\", [Year]}), type text),\n    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Inserted Merged Column\",{{\"FirstDayOfMonth\", type date}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Changed Type2\",{\"FirstDayOfMonth\", \"Platform\", \"MonthName\", \"OI_Budget\", \"Year\", \"Month\"}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Reordered Columns\",{\"MonthName\", \"Year\", \"Month\"}),\n    #\"Filtered Rows1\" = Table.SelectRows(#\"Removed Columns\", each ([Platform] <> \"Health & Consumer\" and [Platform] <> \"Industrials\" and [Platform] <> \"Regulated & Infrastructure\" and [Platform] <> \"Services\"))\nin\n    #\"Filtered Rows1\"",
                    "content": "This M code retrieves data from an Excel file stored in a SharePoint site and transforms it to create a table with columns for platform, month, and budget. \n\nThe code skips the first three rows and removes the last 17 rows of the \"OI Budget Platforms\" sheet. It then alternates the remaining rows and filters out rows where the value in the second column is \"Total\". \n\nThe code selects a subset of the remaining columns and promotes the headers to create column names. It then unpivots the \"EUR m\" column and renames the resulting columns. \n\nThe code adds columns for year and month based on the values in the \"MonthName\" column. It then converts the year and month columns to text and creates a new column for the first day of the month. \n\nFinally, the code removes unwanted columns and filters out rows for certain platforms before returning the resulting table."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    sec_acp_orderIncome_byMonth = Source{[Schema=\"msr\",Item=\"v_fc_order_income_byMonth\"]}[Data],\n    #\"Added Custom Column\" = Table.AddColumn(sec_acp_orderIncome_byMonth, \"report_month_id\", each Text.Combine({Text.PadStart(Text.From([month], \"de-DE\"), 2, \"0\"), \".\", Text.From([year], \"de-DE\")}), type text),\n    #\"Inserted Merged Column\" = Table.AddColumn(#\"Added Custom Column\", \"report_month\", each Text.Combine({\"01.\", [report_month_id]}), type text),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Inserted Merged Column\",{{\"report_month\", type date}})\nin\n    #\"Changed Type\"",
                    "content": "This M code connects to a SQL database named \"datahub\" on server \"muc-mssql-2\". It then selects a view named \"v_fc_order_income_byMonth\" from the \"msr\" schema. \n\nAfter that, it adds a custom column named \"report_month_id\" to the selected view. The new column is created by combining the month and year columns in the selected view, separated by a dot and padded with a leading zero if necessary. \n\nThen, it inserts another custom column named \"report_month\" to the view, which is created by combining \"01.\" with the \"report_month_id\" column. \n\nFinally, it changes the data type of the \"report_month\" column to date."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    rep_v_ll_head_region = Source{[Schema=\"rep\",Item=\"v_ll_head_region\"]}[Data]\nin\n    rep_v_ll_head_region",
                    "content": "This M code connects to a SQL database named \"datahub\" on the server \"muc-mssql-2\" and retrieves data from the table \"v_ll_head_region\" in the \"rep\" schema. It then returns the data as a table named \"rep_v_ll_head_region\"."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    rep_v_ll_head_platform_DACH = Source{[Schema=\"rep\",Item=\"v_ll_head_platform_DACH\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(rep_v_ll_head_platform_DACH, each ([platform] = \"Health & Consumer\" or [platform] = \"Industrials\" or [platform] = \"Regulated & Infrastructure\" or [platform] = \"Services\"))\nin\n    #\"Filtered Rows\"",
                    "content": "This M code is used to connect to a SQL database named \"datahub\" on the server \"muc-mssql-2\". Then it selects the table named \"v_ll_head_platform_DACH\" from the schema \"rep\" and filters the rows where the column \"platform\" has one of the four specified values: \"Health & Consumer\", \"Industrials\", \"Regulated & Infrastructure\", or \"Services\". The filtered table is then returned as the final output."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    rep_v_ll_head_platform = Source{[Schema=\"rep\",Item=\"v_ll_head_platform\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(rep_v_ll_head_platform, each ([platform_name] = \"Health & Consumer\" or [platform_name] = \"Industrials\" or [platform_name] = \"Regulated & Infrastructure\" or [platform_name] = \"Services\"))\nin\n    #\"Filtered Rows\"",
                    "content": "This M code connects to a SQL database named \"datahub\" hosted on \"muc-mssql-2\" server, and retrieves data from the \"rep_v_ll_head_platform\" table. It then filters the data to only include rows where the \"platform_name\" column equals \"Health & Consumer\", \"Industrials\", \"Regulated & Infrastructure\", or \"Services\". The filtered data is then returned as the final output."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    rep_v_ll_head_country = Source{[Schema=\"rep\",Item=\"v_ll_head_country\"]}[Data],\n    #\"Renamed Columns\" = Table.RenameColumns(rep_v_ll_head_country,{{\"emp_id_head\", \"emp_id\"}, {\"email_head\", \"email\"}})\nin\n    #\"Renamed Columns\"",
                    "content": "This M code connects to a SQL database named \"datahub\" on a server named \"muc-mssql-2\". It then selects a table named \"v_ll_head_country\" from the \"rep\" schema in that database. The code then renames two columns in the selected table - \"emp_id_head\" is renamed to \"emp_id\" and \"email_head\" is renamed to \"email\". The resulting table with renamed columns is then returned as the output of this M code."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    msr_v_fc_order_income_budget_orgunit = Source{[Schema=\"msr\",Item=\"v_fc_order_income_budget_orgunit\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(msr_v_fc_order_income_budget_orgunit, each true)\nin\n    #\"Filtered Rows\"",
                    "content": "This M code connects to a SQL database named \"datahub\" on the server \"muc-mssql-2\". It then selects a specific table within that database called \"v_fc_order_income_budget_orgunit\" from the \"msr\" schema. Finally, it filters all rows in that table and returns the filtered table."
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    msr_v_fc_order_income_budget_platform = Source{[Schema=\"msr\",Item=\"v_fc_order_income_budget_platform\"]}[Data]\nin\n    msr_v_fc_order_income_budget_platform",
                    "content": "This M code defines a Power Query that connects to a SQL Server database called \"datahub\" on the server \"muc-mssql-2\". It then selects a view called \"v_fc_order_income_budget_platform\" from the schema \"msr\" within the database. Finally, it returns the data from that view as the output of the Power Query."
          },
          {
                    "text": "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45Wyk1R0lEyBGIQitWJVipKTc/MzwPyjCCCKal5mcV6KakF+aUVDkX5OYl5KUmpRempRXrJ+blgHcn5pXklRZVAtcYE1UMtKchJLEnLLwLxTZDshgnHpyQmZwAFTZHkshNBqs1gIrEA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [role_name = _t, role_id = _t, country_mapping = _t, region_mapping = _t]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"role_name\", type text}, {\"role_id\", Int64.Type}})\nin\n    #\"Changed Type\"",
                    "content": "This M code is defining a query in Power Query Editor in Microsoft Excel or Power BI. \n\n- The first line creates a variable named \"Source\" which is a table created from JSON data that has been compressed and then decompressed.\n- The second line transforms the data types of two columns in the \"Source\" table.\n- The last line renames the query to \"Changed Type\". \n\nThe query is likely being used to transform and clean the data before it is loaded into a report or visualization."
          },
          {
                    "text": "let\n    Source = Excel.Workbook(Web.Contents(\"https://rberger.sharepoint.com/sites/Reports-Report_OI/Shared%20Documents/Report_OI/Data/OI%20Budgets_monthly_vPowerBI.xlsx\")),\n    #\"OI Budget Countries_sheet\" = Source{[Item=\"OI Budget Platforms\",Kind=\"Sheet\"]}[Data],\n    #\"Removed Top Rows\" = Table.Skip(#\"OI Budget Countries_sheet\",3),\n    #\"Removed Bottom Rows\" = Table.RemoveLastN(#\"Removed Top Rows\", 17),\n    #\"Removed Alternate Rows\" = Table.AlternateRows(#\"Removed Bottom Rows\",2,1,1),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Alternate Rows\", each ([Column2] <> \"Total\")),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"Column2\", \"Column5\", \"Column6\", \"Column7\", \"Column8\", \"Column9\", \"Column10\", \"Column11\", \"Column12\", \"Column13\", \"Column14\", \"Column15\", \"Column16\"}),\n    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Other Columns\", [PromoteAllScalars=true]),\n    #\"Unpivoted Other Columns\" = Table.UnpivotOtherColumns(#\"Promoted Headers\", {\"[EUR m]\"}, \"Attribute\", \"Value\"),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Unpivoted Other Columns\",{{\"Value\", type number}}),\n    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"[EUR m]\", \"Platform\"}, {\"Attribute\", \"MonthName\"}, {\"Value\", \"OI_Budget\"}}),\n    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns\", \"Year\", each 2023, Int64.Type),\n    #\"Added Month\" = Table.AddColumn(#\"Added Custom\", \"Month\", each if [MonthName] = \"Jan\" then 1 else if [MonthName] = \"Feb\" then 2 else if [MonthName] = \"Mar\" then 3 else if [MonthName] = \"Apr\" then 4 else if [MonthName] = \"May\" then 5 else if [MonthName] = \"Jun\" then 6 else if [MonthName] = \"Jul\" then 7 else if [MonthName] = \"Aug\" then 8 else if [MonthName] = \"Sep\" then 9 else if [MonthName] = \"Oct\" then 10 else if [MonthName] = \"Nov\" then 11 else if [MonthName] = \"Dec\" then 12 else null, type number),\n    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Added Month\",{{\"Year\", type text}, {\"Month\", type text}}),\n    #\"Inserted Merged Column\" = Table.AddColumn(#\"Changed Type1\", \"FirstDayOfMonth\", each Text.Combine({\"1/\", Text.From([Month], \"en-CH\"), \"/\", [Year]}), type text),\n    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Inserted Merged Column\",{{\"FirstDayOfMonth\", type date}}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Changed Type2\",{\"FirstDayOfMonth\", \"Platform\", \"MonthName\", \"OI_Budget\", \"Year\", \"Month\"}),\n    #\"Removed Columns\" = Table.RemoveColumns(#\"Reordered Columns\",{\"MonthName\", \"Year\", \"Month\"}),\n    #\"Filtered Rows1\" = Table.SelectRows(#\"Removed Columns\", each ([Platform] = \"Health & Consumer\" or [Platform] = \"Industrials\" or [Platform] = \"Regulated & Infrastructure\" or [Platform] = \"Services\"))\nin\n    #\"Filtered Rows1\"",
                    "content": "This M Code imports data from an Excel workbook located on a SharePoint site. It then performs a series of data transformations on the \"OI Budget Platforms\" sheet, including removing rows and columns, promoting headers, unpivoting columns, renaming columns, and adding custom columns. Finally, it filters the resulting table to only include data for specific platforms and returns the filtered table as the final output."
          },
          {
                    "text": "let\n    Source = Excel.Workbook(Web.Contents(\"https://rberger.sharepoint.com/sites/Reports-Utilization/Shared%20Documents/Report_Utilization/Data/platform_sort.xlsx\"), null, true),\n    platform_sort_Table = Source{[Item=\"platform_sort\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(platform_sort_Table,{{\"platform_1_name\", type text}, {\"platform_1_id\", type text}, {\"platform_1_sort\", Int64.Type}, {\"platform_1_name_short\", type text}}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each ([platform_1_name] = \"Health & Consumer\" or [platform_1_name] = \"Industrials\" or [platform_1_name] = \"Regulated & Infrastructure\" or [platform_1_name] = \"Services\")),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Filtered Rows\", {\"platform_1_name\"})\nin\n    #\"Removed Duplicates\"",
                    "content": "This M code imports data from an Excel workbook located in a SharePoint site. Specifically, it retrieves the table named \"platform_sort\". The code then transforms the data by changing the data types of certain columns and filtering for rows where the \"platform_1_name\" column has specific values. Finally, it removes any duplicate rows based on the \"platform_1_name\" column and returns the resulting table."
          },
          {
                    "text": "let\n    Source = Excel.Workbook(Web.Contents(\"https://rberger.sharepoint.com/sites/Reports-Utilization/Shared%20Documents/Report_Utilization/Data/platform_sort.xlsx\"), null, true),\n    platform_sort_Table = Source{[Item=\"platform_sort\",Kind=\"Table\"]}[Data],\n    #\"Changed Type\" = Table.TransformColumnTypes(platform_sort_Table,{{\"platform_1_name\", type text}, {\"platform_1_id\", type text}, {\"platform_1_sort\", Int64.Type}, {\"platform_1_name_short\", type text}}),\n    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each ([platform_1_name] = \"Digital\" or [platform_1_name] = \"Investor Support\" or [platform_1_name] = \"Operations\" or [platform_1_name] = \"RPT\" or [platform_1_name] = \"Strategy & Others\")),\n    #\"Removed Duplicates\" = Table.Distinct(#\"Filtered Rows\", {\"platform_1_name\"})\nin\n    #\"Removed Duplicates\"",
                    "content": "This M code is importing data from an Excel workbook located at a SharePoint site. It is specifically importing the \"platform_sort\" table from the workbook. The code then transforms the data in the table by changing the data types of certain columns, filtering the rows to only include specific platform names, and removing any duplicate platform names. The final result is a table with unique platform names that have been filtered and transformed.",
                    "date": "September 24, 2023 22:58:29"
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    rep_v_ll_head_platform_DACH = Source{[Schema=\"rep\",Item=\"v_ll_head_platform_DACH\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(rep_v_ll_head_platform_DACH, each ([platform] = \"Digital\" or [platform] = \"Investor Support\" or [platform] = \"Operations\" or [platform] = \"RPT\"))\nin\n    #\"Filtered Rows\"",
                    "content": "This M code connects to a SQL database named \"datahub\" on server \"muc-mssql-2\" using the function `Sql.Database()`. It then selects the table named \"v_ll_head_platform_DACH\" from the schema \"rep\" in the database using the notation `[Schema=\"rep\",Item=\"v_ll_head_platform_DACH\"]`. \n\nThe code then filters the rows of the selected table using `Table.SelectRows()`. The filter condition selects only those rows where the value in the \"platform\" column is either \"Digital\", \"Investor Support\", \"Operations\", or \"RPT\". \n\nThe resulting table with filtered rows is returned as the output of the M code.",
                    "date": "September 24, 2023 22:58:32"
          },
          {
                    "text": "let\n    Source = Sql.Database(\"muc-mssql-2\", \"datahub\"),\n    rep_v_ll_head_platform = Source{[Schema=\"rep\",Item=\"v_ll_head_platform\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(rep_v_ll_head_platform, each ([platform_name] <> \"Health & Consumer\" and [platform_name] <> \"Industrials\" and [platform_name] <> \"Regulated & Infrastructure\" and [platform_name] <> \"Services\")),\n    #\"Replaced Value\" = Table.ReplaceValue(#\"Filtered Rows\",\"General\",\"Strategy & Others\",Replacer.ReplaceText,{\"platform_name\"})\nin\n    #\"Replaced Value\"",
                    "content": "This M code connects to a SQL database named \"datahub\" on the server \"muc-mssql-2\". It then selects a table named \"v_ll_head_platform\" from the schema \"rep\" in that database. The code then filters out any rows where the \"platform_name\" column is equal to \"Health & Consumer\", \"Industrials\", \"Regulated & Infrastructure\", or \"Services\". Finally, it replaces any instances of \"General\" in the \"platform_name\" column with \"Strategy & Others\". The resulting table is returned as the output.",
                    "date": "September 24, 2023 22:58:34"
          },
          {
                    "text": "let\n    Source = Table.Combine({#\"rep v_ll_head_region\", #\"rep v_ll_head_country\"}),\n    #\"Filtered Rows\" = Table.SelectRows(Source, each true)\nin\n    #\"Filtered Rows\"",
                    "content": "This M code is combining two tables named \"rep v_ll_head_region\" and \"rep v_ll_head_country\" using the Table.Combine function. The resulting table will have all the columns from both tables. \n\nThen, it filters the resulting table using the Table.SelectRows function with the condition \"each true\", which means that all rows will be kept in the final table without any filtering. \n\nFinally, the resulting filtered table is returned as the output of this M code.",
                    "date": "September 24, 2023 22:58:36"
          },
          {
                    "text": "let\n    Source = OData.Feed(\"https://rolandberger.crm4.dynamics.com/api/data/v9.1\", null, [Implementation=\"2.0\"]),\n    nxtgn_opportunityregistrations_table = Source{[Name=\"nxtgn_opportunityregistrations\",Signature=\"table\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(nxtgn_opportunityregistrations_table,{\"nxtgn_probability\", \"nxtgn_salesteam_concatinate\", \"createdon\", \"nxtgn_deliverystartdate\", \"nxtgn_actualclosedate\", \"_nxtgn_accountid_value\", \"_nxtgn_keyaccount_value\", \"nxtgn_clusterexpertteams_calc\", \"_nxtgn_sectorsapid_value\", \"nxtgn_opportunityregistrationid\", \"_transactioncurrencyid_value\", \"nxtgn_topic\", \"nxtgn_innovationtopics\", \"nxtgn_deliveryenddate\", \"statuscode\", \"nxtgn_estclosedate\", \"nxtgn_multiplesapplatformid\", \"nxtgn_multiplesapfunctionid\", \"nxtgn_estrevenue\", \"_nxtgn_salesunitid_value\", \"nxtgn_FunctionCCId\", \"nxtgn_IndustryCCId\", \"nxtgn_ThemeSAPId\", \"nxtgn_SectorSAPId\"}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Removed Other Columns\",{\"nxtgn_opportunityregistrationid\", \"_nxtgn_accountid_value\", \"_nxtgn_keyaccount_value\", \"nxtgn_topic\", \"nxtgn_salesteam_concatinate\", \"statuscode\", \"nxtgn_estrevenue\", \"nxtgn_probability\", \"nxtgn_estclosedate\", \"nxtgn_deliverystartdate\", \"nxtgn_actualclosedate\", \"nxtgn_clusterexpertteams_calc\", \"_nxtgn_sectorsapid_value\", \"_transactioncurrencyid_value\", \"nxtgn_innovationtopics\", \"nxtgn_deliveryenddate\", \"nxtgn_multiplesapplatformid\", \"nxtgn_multiplesapfunctionid\", \"_nxtgn_salesunitid_value\", \"nxtgn_IndustryCCId\", \"nxtgn_SectorSAPId\", \"nxtgn_FunctionCCId\", \"nxtgn_ThemeSAPId\", \"createdon\"}),\n    #\"Expanded nxtgn_IndustryCCId\" = Table.ExpandRecordColumn(#\"Reordered Columns\", \"nxtgn_IndustryCCId\", {\"new_code_string_industrycc\", \"nxtgn_name\"}, {\"nxtgn_IndustryCCId.new_code_string_industrycc\", \"nxtgn_IndustryCCId.nxtgn_name\"}),\n    #\"Expanded nxtgn_SectorSAPId\" = Table.ExpandRecordColumn(#\"Expanded nxtgn_IndustryCCId\", \"nxtgn_SectorSAPId\", {\"nxtgn_name\", \"nxtgn_code\"}, {\"nxtgn_SectorSAPId.nxtgn_name\", \"nxtgn_SectorSAPId.nxtgn_code\"}),\n    #\"Expanded nxtgn_FunctionCCId\" = Table.ExpandRecordColumn(#\"Expanded nxtgn_SectorSAPId\", \"nxtgn_FunctionCCId\", {\"nxtgn_name\", \"new_code_string\"}, {\"nxtgn_FunctionCCId.nxtgn_name\", \"nxtgn_FunctionCCId.new_code_string\"}),\n    #\"Expanded nxtgn_ThemeSAPId\" = Table.ExpandRecordColumn(#\"Expanded nxtgn_FunctionCCId\", \"nxtgn_ThemeSAPId\", {\"nxtgn_name\", \"nxtgn_code\"}, {\"nxtgn_ThemeSAPId.nxtgn_name\", \"nxtgn_ThemeSAPId.nxtgn_code\"}),\n    #\"Inserted Text Before Delimiter\" = Table.AddColumn(#\"Expanded nxtgn_ThemeSAPId\", \"Industry Platform (Datahub)\", each Text.BeforeDelimiter([nxtgn_IndustryCCId.nxtgn_name], \" (\"), type text),\n    #\"Inserted Text Before Delimiter1\" = Table.AddColumn(#\"Inserted Text Before Delimiter\", \"Functional Platform (Datahub)\", each Text.BeforeDelimiter([nxtgn_FunctionCCId.nxtgn_name], \" (\"), type text)\nin\n    #\"Inserted Text Before Delimiter1\"",
                    "content": "This M Code retrieves data from a Dynamics 365 CRM system using the OData.Feed function. It then selects a subset of columns from the \"nxtgn_opportunityregistrations\" table and reorders them. \n\nIt then expands multiple record columns (\"nxtgn_IndustryCCId\", \"nxtgn_SectorSAPId\", \"nxtgn_FunctionCCId\", and \"nxtgn_ThemeSAPId\") to extract specific fields from those records as new columns in the table. \n\nFinally, it inserts two new columns - \"Industry Platform (Datahub)\" and \"Functional Platform (Datahub)\" - by extracting text before the first delimiter in the \"nxtgn_IndustryCCId.nxtgn_name\" and \"nxtgn_FunctionCCId.nxtgn_name\" columns, respectively. The resulting table is returned as the output of the function.",
                    "date": "September 24, 2023 22:58:39"
          },
          {
                    "text": "let\n    Source = OData.Feed(\"https://rolandberger.crm4.dynamics.com/api/data/v9.1\", null, [Implementation=\"2.0\"]),\n    nxtgn_shareofwallets_table = Source{[Name=\"nxtgn_shareofwallets\",Signature=\"table\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(nxtgn_shareofwallets_table, each ([nxtgn_iscountry] = true)),\n    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"nxtgn_rblegalunit\", \"_nxtgn_salesleadid_value\", \"nxtgn_shareofwalletid\", \"nxtgn_countrypercentage\", \"nxtgn_rblegalunitccid\"}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Removed Other Columns\",{\"_nxtgn_salesleadid_value\", \"nxtgn_shareofwalletid\", \"nxtgn_rblegalunit\", \"nxtgn_rblegalunitccid\", \"nxtgn_countrypercentage\"})\nin\n    #\"Reordered Columns\"",
                    "content": "This M code is used in Power Query to extract data from an OData feed. The code connects to a Dynamics 365 CRM instance, retrieves a table called \"nxtgn_shareofwallets\" and filters the rows where the column \"nxtgn_iscountry\" equals true. It then selects a subset of columns and reorders them before returning the resulting table.",
                    "date": "September 24, 2023 22:58:41"
          },
          {
                    "text": "let\n    Source = OData.Feed(\"https://rolandberger.crm4.dynamics.com/api/data/v9.1\", null, [Implementation=\"2.0\"]),\n    transactioncurrencies_table = Source{[Name=\"transactioncurrencies\",Signature=\"table\"]}[Data],\n    #\"Removed Other Columns\" = Table.SelectColumns(transactioncurrencies_table,{\"isocurrencycode\", \"currencyname\", \"exchangerate\", \"currencysymbol\", \"transactioncurrencyid\"}),\n    #\"Reordered Columns\" = Table.ReorderColumns(#\"Removed Other Columns\",{\"transactioncurrencyid\", \"isocurrencycode\", \"currencyname\", \"currencysymbol\", \"exchangerate\"})\nin\n    #\"Reordered Columns\"",
                    "content": "This M code is used to connect to a Dynamics 365 CRM instance through the OData feed and retrieve data from the \"transactioncurrencies\" table. It then selects specific columns from the table, removes all other columns, and reorders the remaining columns. Finally, it returns the reordered columns as a new table.",
                    "date": "September 24, 2023 22:58:42"
          },
          {
                    "text": "[email] = username()",
                    "content": "This M code assigns the result of the `username()` function to the variable `[email]`. The `username()` function returns the username of the currently logged in user. Therefore, the variable `[email]` would contain the username of the user. It is possible that the variable name `[email]` is being used to store the username because the username is often used as an email address in some systems.",
                    "date": "September 24, 2023 22:58:44"
          },
          {
                    "text": "COUNTROWS(FILTER('rep v_hr_employee', FIND(\"Partner\", 'rep v_hr_employee'[jobcode],,0)>0))",
                    "content": "This DAX code is calculating the count of rows in a filtered table. \n\nThe filtered table is created by applying a filter condition to a source table called 'rep v_hr_employee'. The filter condition checks if the jobcode column in the 'rep v_hr_employee' table contains the word \"Partner\". This is done using the FIND function, which returns the starting position of the searched text in the target string. If the text is not found, the function returns 0.\n\nSo, the FILTER function returns a table with only those rows where the jobcode column contains the word \"Partner\". \n\nFinally, the COUNTROWS function is used to count the number of rows in the filtered table and return the result.",
                    "date": "September 24, 2023 22:58:46"
          },
          {
                    "text": "\n    CONCATENATEX (\n        VALUES ('pub dim_date'[MonthNameShort] ),\n        'pub dim_date'[MonthNameShort],\n        \", \"\n    )",
                    "content": "This DAX code is concatenating all the distinct month names from the 'pub dim_date' table and joining them with a comma and a space separator. \n\nThe function being used here is CONCATENATEX, which concatenates the values of an expression evaluated for each row in a table or table-like structure. \n\nThe first argument of the function is the table expression that provides the rows to iterate over. In this case, it is the VALUES function applied to the 'pub dim_date'[MonthNameShort] column. \n\nThe second argument is the expression to evaluate for each row. It is also 'pub dim_date'[MonthNameShort] in this case.\n\nThe third argument is the delimiter or separator to use between the concatenated values, which is a comma and a space (\", \").",
                    "date": "September 24, 2023 22:58:50"
          },
          {
                    "text": "TODAY()",
                    "content": "TODAY() is a DAX function that returns the current date in the date format. It does not take any arguments and is used to create calculations that depend on the current date. For example, it can be used in a measure to calculate the number of days between the current date and a specific date in a data model. It is important to note that the TODAY() function is volatile, meaning that it will recalculate every time the report or visualization is refreshed.",
                    "date": "September 24, 2023 22:58:52"
          },
          {
                    "text": "CALCULATE(\n                FIRSTNONBLANK('pub dim_date'[Calendarweek], \"\"), \n                FILTER(ALL('pub dim_date'), 'pub dim_date'[Date] = TODAY()))",
                    "content": "This DAX code creates a calculated measure that returns the calendar week of the current date. \n\nThe function starts with the CALCULATE function, which evaluates an expression in a modified filter context. \n\nThe FIRSTNONBLANK function returns the first non-blank value in the specified column ('pub dim_date'[Calendarweek]). If there are no non-blank values, it returns a blank value (\"\"). \n\nThe FILTER function creates a new table that includes all rows from the 'pub dim_date' table where the 'Date' column is equal to today's date (TODAY() function). \n\nThe ALL function removes any filters applied to the 'pub dim_date' table, except for any filters applied to the 'Date' column by the FILTER function. \n\nTogether, these functions return the calendar week of the current date, based on the 'Calendarweek' column in the 'pub dim_date' table.",
                    "date": "September 24, 2023 22:58:55"
          },
          {
                    "text": "[CurrentDay] & \" (\" & [CurrentWeek] & \")\"",
                    "content": "This DAX code is concatenating the value of two different measures: [CurrentDay] and [CurrentWeek]. The \"&\" operator is used to concatenate strings in DAX. \n\nThe final result will be a string that shows the value of [CurrentDay], followed by a space, an opening parenthesis, the value of [CurrentWeek], and a closing parenthesis. \n\nFor example, if [CurrentDay] is \"Monday\" and [CurrentWeek] is \"Week 1\", the final result will be \"Monday (Week 1)\".",
                    "date": "September 24, 2023 22:58:57"
          },
          {
                    "text": "YEAR(TODAY())",
                    "content": "The DAX code `YEAR(TODAY())` returns the current year as an integer value. \n\nThe `TODAY()` function returns the current date as a datetime value. The `YEAR()` function extracts the year from the datetime value and returns it as an integer. \n\nSo, if today is January 1st, 2022, the DAX code `YEAR(TODAY())` will return the integer value 2022.",
                    "date": "September 24, 2023 22:58:59"
          },
          {
                    "text": "\"CW-\" & 'pub dim_date'[WeekOfYear]",
                    "content": "This DAX code concatenates the string \"CW-\" with the value of the column 'WeekOfYear' from the table 'pub dim_date'. The resulting output will be a new column that contains the week number preceded by \"CW-\". For example, if the value in the 'WeekOfYear' column is 23, the new column will display \"CW-23\". This code is commonly used to format data in a way that is more easily readable or identifiable.",
                    "date": "September 24, 2023 22:59:00"
          },
          {
                    "text": "\n    VAR current_month = MONTH(TODAY())\n    VAR result = IF('pub dim_date'[Date].[MonthNo] <= current_month, 1, 0)\nRETURN\n    result",
                    "content": "This DAX code creates two variables and returns the value of the second variable. \n\nThe first variable 'current_month' is created using the MONTH() function which retrieves the month number (1-12) of the current date using the TODAY() function. \n\nThe second variable 'result' contains an IF statement that checks whether the month number from the 'pub dim_date' table is less than or equal to the 'current_month' variable. If it is, it returns a value of 1, otherwise it returns a value of 0. \n\nFinally, the code returns the value of the 'result' variable. This code is likely used to filter or calculate data based on the current month.",
                    "date": "September 24, 2023 22:59:02"
          },
          {
                    "text": "CALCULATE(SUM('msr v_fc_order_income_accumulated'[order_income_current_dax]), MONTH('msr v_fc_order_income_accumulated'[report_month]) <= MONTH(TODAY())-1)",
                    "content": "This DAX code is a measure that calculates the sum of the 'order_income_current_dax' column in the 'msr v_fc_order_income_accumulated' table. The calculation is filtered by the 'report_month' column from the same table, where the month value is less than or equal to the current month minus one. \n\nThe 'CALCULATE' function modifies the filter context of the expression, allowing for the inclusion of additional filters. In this case, the filter is applied to the 'report_month' column using the 'MONTH' function to extract the month value from the date column. \n\nThe result of this measure will be the total order income for the previous month.",
                    "date": "September 24, 2023 22:59:05"
          },
          {
                    "text": "SUM('msr v_fc_order_income_accumulated'[order_income_total])",
                    "content": "This DAX code calculates the sum of the 'order_income_total' column in the 'msr v_fc_order_income_accumulated' table. It adds up all the values in the 'order_income_total' column and returns the total sum. The result of this calculation is a single numeric value.",
                    "date": "September 24, 2023 22:59:06"
          },
          {
                    "text": "TOTALYTD('msr v_fc_order_income_accumulated'[OI_Monthly_for_YTD], 'pub dim_date'[Date])",
                    "content": "This DAX code calculates the year-to-date (YTD) total of the 'OI_Monthly_for_YTD' column from the 'msr v_fc_order_income_accumulated' table, based on the dates in the 'Date' column from the 'pub dim_date' table. \n\nThe function used for this calculation is TOTALYTD, which takes two arguments: \n\n1. The first argument is the column to be aggregated (i.e. 'OI_Monthly_for_YTD' in this case), and \n2. The second argument is the date column that defines the time period for which the YTD total needs to be calculated (i.e. 'Date' in this case). \n\nThe result of this calculation is a table that shows the YTD total of 'OI_Monthly_for_YTD' for each date in the 'Date' column.",
                    "date": "September 24, 2023 22:59:08"
          },
          {
                    "text": "SUM(OI_Budget_Countries[OI_Budget])\n//    var check_industry = calculate(isfiltered(platforms_industry[platform_1_name]) , allselected())\n//    var check_function = calculate(isfiltered(platforms_function[platform_1_name]) , allselected())\n//return\n//    if(check_industry || check_function, BLANK(), SUM(OI_Budget_Countries[OI_Budget]))",
                    "content": "The DAX code calculates the sum of the 'OI_Budget' column in the 'OI_Budget_Countries' table. \n\nThere are also some commented-out lines of code that are not currently being executed. These lines of code use the 'calculate' function to check if the 'platform_1_name' value is filtered in the 'platforms_industry' or 'platforms_function' tables, while ignoring any other filters applied to the report. \n\nIf either of these checks returns true (meaning that the 'platform_1_name' value is filtered in one of the tables), the code returns a blank value. Otherwise, it returns the sum of the 'OI_Budget' column in the 'OI_Budget_Countries' table. However, since the lines of code that perform these checks are commented out, the code always returns the sum of 'OI_Budget'.",
                    "date": "September 24, 2023 22:59:11"
          },
          {
                    "text": "TOTALYTD([OI_Monthly_BUD_C], 'pub dim_date'[Date])",
                    "content": "This DAX code calculates the year-to-date (YTD) total of a measure called \"OI_Monthly_BUD_C\". The YTD calculation starts from the beginning of the current year and goes up to the date specified in the second argument ('pub dim_date'[Date]), which is a reference to the date column in a separate table called \"pub dim_date\". \n\nThe TOTALYTD function is a time intelligence function in DAX that allows you to perform calculations on a measure across a specified time period, such as a year, quarter, or month. It takes two arguments: the first is the measure to be aggregated, and the second is the date column used to define the time period. \n\nIn this case, the code is aggregating the \"OI_Monthly_BUD_C\" measure on a YTD basis, using the \"pub dim_date\"[Date] column to define the time period.",
                    "date": "September 24, 2023 22:59:14"
          },
          {
                    "text": "CALCULATE([OI_Monthly], SAMEPERIODLASTYEAR('pub dim_date'[Date]))",
                    "content": "This DAX code is creating a measure that calculates the value of another measure called \"OI_Monthly\" for the same period last year. \n\nThe \"CALCULATE\" function is being used to modify the context in which the measure is being evaluated. \n\nThe first argument of the \"CALCULATE\" function is the measure being modified, which is \"OI_Monthly\" in this case. \n\nThe second argument is a time intelligence function called \"SAMEPERIODLASTYEAR\", which returns the same period from the previous year. \n\nThe \"SAMEPERIODLASTYEAR\" function takes a date column as its argument, which in this case is the \"Date\" column from the \"pub dim_date\" table. \n\nSo, the DAX code is essentially calculating the value of the \"OI_Monthly\" measure for the same period last year, as determined by the \"Date\" column.",
                    "date": "September 24, 2023 22:59:18"
          },
          {
                    "text": "CALCULATE([OI_YTD], SAMEPERIODLASTYEAR('pub dim_date'[Date]))",
                    "content": "This DAX code calculates the value of the measure [OI_YTD] (which presumably stands for \"operating income year-to-date\") for the same period last year, using the SAMEPERIODLASTYEAR function. \n\nThe CALCULATE function is used to modify the context in which the measure is evaluated, in this case by applying the SAMEPERIODLASTYEAR function to the 'pub dim_date'[Date] column. This function returns a table that represents the same period of the previous year as the current context, which is then used to calculate the value of [OI_YTD] for that period. \n\nOverall, this DAX code is useful for comparing the operating income of the current period to the same period in the previous year.",
                    "date": "September 24, 2023 22:59:20"
          },
          {
                    "text": "\n    VAR delta_BUD = DIVIDE([OI_Monthly], [OI_Monthly_BUD_C]) - 1\nRETURN\n    IF(delta_BUD < -0.9, \"\", delta_BUD)",
                    "content": "This DAX code first creates a variable called \"delta_BUD\" that calculates the difference between the monthly open interest (OI_Monthly) and the budgeted monthly open interest (OI_Monthly_BUD_C) as a percentage change. The DIVIDE function is used to calculate the percentage change and the -1 is subtracted from it to get the difference.\n\nThe RETURN statement then uses an IF function to check if the calculated value of delta_BUD is less than -0.9. If it is, then it returns an empty string (\"\"), which means that no value will be displayed. If delta_BUD is greater than or equal to -0.9, it returns the value of delta_BUD. \n\nIn simpler terms, this DAX code is checking if the difference between the monthly open interest and the budgeted monthly open interest is greater than 90% below the budgeted value. If it is, then it will not display any value, otherwise it will display the difference between the two values.",
                    "date": "September 24, 2023 22:59:25"
          },
          {
                    "text": "[OI_YTD] * 1000",
                    "content": "This DAX code multiplies the value in the column or measure named \"OI_YTD\" by 1000. The result is a new column or measure with the same name as \"OI_YTD\", but with all values multiplied by 1000. \n\nFor example, if \"OI_YTD\" represents the total operating income year-to-date in dollars, multiplying it by 1000 would convert the values to thousands of dollars. This could be useful for reporting purposes or for comparing the performance of different business units that operate on different scales.",
                    "date": "September 24, 2023 22:59:27"
          },
          {
                    "text": "DIVIDE([OI_YTD], 1000)",
                    "content": "This DAX code is using the DIVIDE function to calculate a value by dividing the value of the OI_YTD column by 1000. \n\nThe OI_YTD column likely contains a cumulative total of a certain metric, such as sales, for the year to date. Dividing this value by 1000 would convert the unit of measurement to thousands, which may be more convenient for analysis or presentation purposes. \n\nFor example, if the value of OI_YTD is 5000, the result of this calculation would be 5.",
                    "date": "September 24, 2023 22:59:30"
          },
          {
                    "text": "DIVIDE([OI_YTD_PY], 1000)",
                    "content": "This DAX code is dividing the value of the \"OI_YTD_PY\" measure by 1000. \n\nThe \"OI_YTD_PY\" measure is likely a measure that calculates the total value of something (such as sales or revenue) year-to-date for the previous year. \n\nDividing this measure by 1000 is likely done to make the resulting number easier to read and understand, by converting it into thousands. For example, if the original measure value was $1,234,567, the resulting value after the division would be $1,234.567.",
                    "date": "September 24, 2023 22:59:32"
          },
          {
                    "text": "DIVIDE([OI_YTD_BUD_C], 1000)",
                    "content": "This DAX code is using the \"DIVIDE\" function in order to divide the value of the \"OI_YTD_BUD_C\" measure by 1000. The result of this division will be returned as the output of this code. \n\nIn other words, the code is taking the value of the \"OI_YTD_BUD_C\" measure and dividing it by 1000. This is likely being done to convert the value to a different unit of measurement or to make the value more readable or manageable in a report or visualization.",
                    "date": "September 24, 2023 22:59:34"
          },
          {
                    "text": "REPT(\"l\", 33)",
                    "content": "This DAX code is used to repeat a character or a string a certain number of times. In this case, the character \"l\" is being repeated 33 times. The REPT function takes two arguments, the first being the character or string to be repeated, and the second being the number of times to repeat it. \n\nSo, the result of this code would be a string of 33 \"l\"s, like this: \"lllllllllllllllllllllllllllllll\".",
                    "date": "September 24, 2023 22:59:35"
          },
          {
                    "text": "CALCULATE([OI_Monthly], ALL('pub dim_date'[Date]), 'pub dim_date'[Year] = YEAR(TODAY())-1)",
                    "content": "The above DAX code is a measure that calculates the sum of the measure [OI_Monthly] for the previous year from the current year's date. \n\nThe function CALCULATE is used to evaluate an expression in a modified filter context. In this case, it modifies the filter context for the measure [OI_Monthly] by removing any filters applied on the 'pub dim_date'[Date] column. \n\nThe ALL function is used to remove any filters applied on the 'pub dim_date'[Date] column. This means that the measure will calculate the sum of [OI_Monthly] for all dates in the selected year.\n\nThe second argument in the CALCULATE function restricts the filter context to the previous year from the current year's date. This is achieved by filtering the 'pub dim_date'[Year] column to be equal to YEAR(TODAY())-1. The TODAY function returns the current date and the YEAR function extracts the year from the current date. Subtracting 1 from the current year gives the previous year.",
                    "date": "September 24, 2023 22:59:40"
          },
          {
                    "text": "CALCULATE([OI_Monthly], 'pub dim_date'[Year] = YEAR(TODAY()))",
                    "content": "This DAX code is creating a new measure that calculates the value of the measure called \"OI_Monthly\" but only for the current year. \n\nThe function \"CALCULATE\" allows us to modify the context in which the measure is evaluated. In this case, the context is filtered by the condition 'pub dim_date'[Year] = YEAR(TODAY()), which means that only the data for the current year will be considered.\n\nThe function \"YEAR(TODAY())\" returns the current year as a number, which is compared to the values in the 'pub dim_date'[Year] column.\n\nOverall, this code is useful when we want to see the value of a measure only for a specific period of time, in this case, only for the current year.",
                    "date": "September 24, 2023 22:59:43"
          },
          {
                    "text": "CALCULATE([OI_Monthly_BUD_C], MONTH(OI_Budget_Countries[FirstDayOfMonth]) <= MONTH(TODAY())-1)",
                    "content": "This DAX code is using the CALCULATE function to filter a measure called [OI_Monthly_BUD_C]. The filter is based on a condition that compares the month of the \"FirstDayOfMonth\" column in the \"OI_Budget_Countries\" table to the current month minus one (i.e., the previous month). \n\nIn other words, the code is calculating the value of [OI_Monthly_BUD_C] for all countries where the \"FirstDayOfMonth\" is in the previous month or earlier. \n\nFor example, if today is June 15th, the code will calculate the value of [OI_Monthly_BUD_C] for all countries where the \"FirstDayOfMonth\" is in May or earlier.",
                    "date": "September 24, 2023 22:59:44"
          },
          {
                    "text": "DIVIDE([OI_PY], 1000)",
                    "content": "This DAX code is a formula used to divide a measure called \"OI_PY\" by 1000. \n\nThe \"DIVIDE\" function is used to perform the division operation. It takes two arguments: the first argument is the numerator, which is the measure \"OI_PY\", and the second argument is the denominator, which is the value 1000. \n\nThe purpose of this formula could be to convert the measure \"OI_PY\" from a large number into a smaller number that is easier to read and work with. For example, if the value of \"OI_PY\" is 5000, the formula would return 5.",
                    "date": "September 24, 2023 22:59:48"
          },
          {
                    "text": "([OI_Monthly] - [OI_Monthly_PY]) / [OI_Monthly_PY]",
                    "content": "This DAX code calculates the percentage change in the \"OI_Monthly\" measure from the previous year, where OI stands for \"Open Interest\". \n\nThe formula subtracts the value of \"OI_Monthly_PY\" (Open Interest Monthly for the Previous Year) from \"OI_Monthly\" (Open Interest Monthly for the current year), and then divides the result by the value of \"OI_Monthly_PY\". \n\nThe resulting value is the percentage change in open interest from the previous year. This calculation can be useful in analyzing the trend of open interest over time and identifying potential opportunities or risks in the market.",
                    "date": "September 24, 2023 22:59:50"
          },
          {
                    "text": "([OI_Monthly] - [OI_Monthly_BUD_C]) / [OI_Monthly_BUD_C]",
                    "content": "This DAX code calculates the variance percentage between two measures: [OI_Monthly] and [OI_Monthly_BUD_C]. \n\n- [OI_Monthly] is a measure that calculates the total open interest for a specific month. \n- [OI_Monthly_BUD_C] is a measure that calculates the budgeted open interest for the same month. \n\nThe formula subtracts [OI_Monthly_BUD_C] from [OI_Monthly], which gives the variance between the actual and budgeted open interest for the month. This value is then divided by [OI_Monthly_BUD_C] to get the variance percentage. \n\nThe resulting percentage indicates how much the actual open interest deviates from the budgeted open interest as a percentage of the budgeted open interest. A positive percentage means that the actual open interest is higher than the budgeted open interest, while a negative percentage means that the actual open interest is lower than the budgeted open interest.",
                    "date": "September 24, 2023 22:59:53"
          },
          {
                    "text": "CALCULATE([OI_YTD], ALL('pub dim_date'[Date]), 'pub dim_date'[Month] <= MONTH(TODAY())-1)\n\n//IF(MAX('pub dim_date'[Date]) <= TODAY(), [OI_YTD], BLANK())",
                    "content": "The first line of DAX code is using the CALCULATE function to calculate the measure [OI_YTD] (which likely stands for \"Open Interest Year-to-Date\") with some additional filters applied. \n\nThe first filter is using the ALL function to remove any filters on the 'pub dim_date'[Date] column. This means that the calculation will be done without considering any specific date. \n\nThe second filter is using the 'pub dim_date'[Month] column to only include data where the month is less than or equal to the current month minus one. This means that the calculation will only include data from previous months in the current year.\n\nThe second line of DAX code is using an IF statement to determine whether to show the [OI_YTD] measure or a blank value. The condition is checking whether the latest date in the 'pub dim_date'[Date] column is less than or equal to today's date. If it is, then the [OI_YTD] measure is shown. Otherwise, a blank value is shown.",
                    "date": "September 24, 2023 22:59:57"
          },
          {
                    "text": "DIVIDE([OI_YTD_no_future], 1000)",
                    "content": "The DAX code is using the DIVIDE function to divide the value of the measure [OI_YTD_no_future] by 1000. \n\nThe DIVIDE function takes two arguments, the numerator and the denominator. In this case, the numerator is the measure [OI_YTD_no_future]. The denominator is the value 1000. \n\nThe purpose of this code is to convert the measure [OI_YTD_no_future] from its original unit of measurement to a new unit of measurement that is 1000 times smaller. This is commonly done to make the numbers easier to read and work with. \n\nFor example, if the original measure [OI_YTD_no_future] had a value of 5000, the result of this code would be 5, which is the value of 5000 divided by 1000.",
                    "date": "September 24, 2023 23:00:00"
          },
          {
                    "text": "CALCULATE([OI_Monthly_formatted], 'msr v_fc_order_income_accumulated'[function] = \"Operations\")",
                    "content": "This DAX code calculates the value of the measure \"OI_Monthly_formatted\" filtered by the condition that the column \"function\" in the table 'msr v_fc_order_income_accumulated' is equal to \"Operations\". \n\nThe CALCULATE function in DAX allows for the manipulation of a measure based on certain conditions or filters. In this case, the condition is specified using the second argument of the function, which is a filter expression. \n\nThe filter expression is in the form of a column reference followed by a comparison operator and a value. The column reference is 'msr v_fc_order_income_accumulated'[function], which refers to the \"function\" column in the 'msr v_fc_order_income_accumulated' table. The comparison operator is \"=\" and the value being compared is \"Operations\". \n\nTherefore, this code returns the value of the measure \"OI_Monthly_formatted\" only for the rows where the \"function\" column in the 'msr v_fc_order_income_accumulated' table is equal to \"Operations\".",
                    "date": "September 24, 2023 23:00:04"
          },
          {
                    "text": "CALCULATE([OI_Monthly_formatted], 'msr v_fc_order_income_accumulated'[function] = \"Digital\")",
                    "content": "This DAX code is using the CALCULATE function to filter a measure called [OI_Monthly_formatted] based on a condition. The condition is specified using a filter argument that is passed to the CALCULATE function. The filter argument is checking for a column called 'function' in a table called 'msr v_fc_order_income_accumulated' and filtering for only those rows where the value in the 'function' column is equal to \"Digital\". \n\nIn other words, this code is calculating the value of the [OI_Monthly_formatted] measure, but only for those rows in the 'msr v_fc_order_income_accumulated' table where the 'function' column has a value of \"Digital\".",
                    "date": "September 24, 2023 23:00:06"
          },
          {
                    "text": "CALCULATE([OI_Monthly_formatted], 'msr v_fc_order_income_accumulated'[function] = \"Investor Support\")",
                    "content": "This DAX code calculates the measure [OI_Monthly_formatted] but applies a filter to it using the CALCULATE function. The filter is specified in the second argument of the CALCULATE function, which is a condition that needs to be satisfied for the filter to be applied. \n\nIn this case, the filter condition is that the value in the 'function' column of the 'msr v_fc_order_income_accumulated' table needs to be equal to \"Investor Support\". This means that the measure [OI_Monthly_formatted] will only be calculated for rows in the 'msr v_fc_order_income_accumulated' table where the 'function' column contains the value \"Investor Support\".\n\nEssentially, this code is calculating a modified version of the [OI_Monthly_formatted] measure that only includes rows where the 'function' column is \"Investor Support\".",
                    "date": "September 24, 2023 23:00:10"
          }
]